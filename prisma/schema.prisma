generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Companies {
  id              String        @id @default(uuid())
  name            String
  email           String        @unique
  address         String        @db.Text
  phone           String        @db.VarChar(15)
  logo            String?
  brand_color     String
  amount          Int           @default(0)
  payments        Payment[]
  users           User[]
  subscription_id String        @unique
  subscription    Subscriptions @relation(fields: [subscription_id], references: [id])

  Clients     Clients[]
  Tasks       Tasks[]
  Templates   Templates[]
  Invoices    Invoices[]
  Transaction Transaction[]

  @@index([email, id])
}

model Subscriptions {
  id         String    @id @default(uuid())
  start_date DateTime  @default(now())
  end_date   DateTime?
  is_active  Boolean   @default(false)

  plan_id String
  plan    SubscriptionPLan @relation(fields: [plan_id], references: [id])
  company Companies?
}

model SubscriptionPLan {
  id                String  @id @default(uuid())
  name              String
  price             Decimal
  max_users         Int
  max_invoices      Int
  whatsapp_reminder Boolean
  export_excel      Boolean
  auto_reminder     Boolean

  subscriptions Subscriptions[]
}

model Payment {
  id             String  @id @default(uuid())
  account_name   String
  account_number String
  is_default     Boolean

  wallet_id String
  wallet    Wallet @relation(fields: [wallet_id], references: [id])

  company_id String
  company    Companies @relation(fields: [company_id], references: [id])
}

model User {
  id            String   @id @default(uuid())
  company_id    String?
  name          String
  role          UserRole
  profile_image String?

  company Companies? @relation(fields: [company_id], references: [id])

  Templates Templates[]
  Invoices  Invoices[]
}

enum UserRole {
  owner
  admin
  administrator
}

model Clients {
  id         String  @id @default(uuid())
  company_id String
  name       String
  email      String  @unique
  phone      String
  address    String  @db.Text
  note       String?

  company Companies @relation(fields: [company_id], references: [id])

  Invoices Invoices[]
}

model Tasks {
  id          String  @id @default(uuid())
  company_id  String
  title       String
  description String?
  unit_price  Int

  company Companies @relation(fields: [company_id], references: [id])
}

model Templates {
  id         String  @id @default(uuid())
  name       String
  content    String  @db.Text
  user_id    String
  is_default Boolean
  company_id String

  user    User      @relation(fields: [user_id], references: [id])
  company Companies @relation(fields: [company_id], references: [id])

  Invoices Invoices[]
}

model InvoiceItem {
  id         String  @id @default(uuid())
  invoice_id String
  title      String
  unit_price Decimal
  quantity   Int
  total      Decimal

  invoice Invoices @relation(fields: [invoice_id], references: [id])
}

model ReminderSchedules {
  id          String          @id @default(uuid())
  invoice_id  String
  type        ReminderType
  days_offset Int
  channel     ReminderChannel
  message     String          @db.Text
  is_sent     Boolean
  sent_at     DateTime?

  invoice Invoices @relation(fields: [invoice_id], references: [id])
}

enum ReminderType {
  before_due
  on_due
  after_due
}

enum ReminderChannel {
  whatsapp
  email
}

model Invoices {
  id             String        @id @default(uuid())
  company_id     String
  client_id      String
  user_id        String
  invoice_number String
  title          String
  status         InvoiceStatus @default(unpaid)
  issue_date     DateTime
  due_date       DateTime
  paid_at        DateTime?
  notes          String?       @db.Text
  template_id    String
  total          Int

  company  Companies @relation(fields: [company_id], references: [id])
  client   Clients   @relation(fields: [client_id], references: [id])
  user     User      @relation(fields: [user_id], references: [id])
  template Templates @relation(fields: [template_id], references: [id])

  InvoiceItem       InvoiceItem[]
  ReminderSchedules ReminderSchedules[]
}

enum InvoiceStatus {
  unpaid
  paid
  overdue
}

model Wallet {
  id   String     @id @default(uuid())
  name String
  type WalletType
  logo String?

  Payment Payment[]
}

enum WalletType {
  bank
  ewallet
}

model Transaction {
  id             String    @id @default(uuid())
  order_id       String    @unique
  company_id     String
  gross_amount   Int
  net_amount     Int
  fee            Int
  payment_method String
  status         String?
  update_at      DateTime?

  company Companies @relation(fields: [company_id], references: [id])
}
